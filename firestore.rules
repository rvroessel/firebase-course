rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents {

     function isAuthenticated() {
     	return request.auth.uid !=null;
  ***REMOVED*****REMOVED***

     function isNonEmptyString(fieldName) {
     return request.resource.data[fieldName] is string &&
     				request.resource.data[fieldName].size()> 0;
  ***REMOVED*****REMOVED***

     function isValidCourse() {
     	return request.resource.data.seqNo is number
      			&& request.resource.data.seqNo >= 0
            && isNonEmptyString("url");
  ***REMOVED*****REMOVED***

     function isAdmin() {
       return isAuthenticated() && 'admin' in request.auth.token && request.auth.token.admin == true;
          // get( /databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
  ***REMOVED*****REMOVED***

     function isKnownUser() {
        return isAuthenticated() &&
        exists( /databases/$(database)/documents/users/$(request.auth.uid) );
  ***REMOVED*****REMOVED***

     match /courses/{courseId} {
     	allow read: if isKnownUser();
      allow write: if isAdmin() && isValidCourse();
      //&& resource.data.status == 'draft';

      match /lessons/{lessonId} {
       allow read: if isKnownUser();
       allow write: if isAdmin();
   ***REMOVED*****REMOVED***

  ***REMOVED*****REMOVED***

     // this rule targets collection group queries on nested lessons collections
     match /{path=**}/lessons/{lessonId} {
       allow read: if isKnownUser();
  ***REMOVED*****REMOVED***

***REMOVED***

}
